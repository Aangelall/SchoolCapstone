<?php

use App\Http\Controllers\ProfileController;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\UserController;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\SectionSubjectController;
use App\Http\Controllers\MasterListController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\AdvisoryClassController;
use App\Http\Controllers\SubjectController;
use App\Http\Controllers\AchieverController;
use App\Http\Controllers\SectionController;
use App\Http\Controllers\StrandController;
use App\Http\Controllers\ClassController;
use App\Http\Controllers\StudentAccessController;
use App\Http\Controllers\TeacherDashboardController;

// Dashboard Routes
Route::middleware(['auth', 'verified'])->get('/user-dashboard', function () {
    if (Auth::user()->role === 'admin') {
        return redirect()->route('dashboard')->with('error', 'Admins cannot access the User Dashboard.');
    }

    if (Auth::user()->role === 'student') {
        return view('student.dashboard');
    }

    return view('teacher.dashboard');
})->name('user.dashboard');

Route::middleware(['auth', 'verified'])->get('/dashboard', function () {
    if (Auth::user()->role !== 'admin') {
        return redirect()->route('user.dashboard')->with('error', 'Access denied. Redirected to User Dashboard.');
    }
    return view('admin.dashboard');
})->name('dashboard');

// Protected Routes with Student Restrictions
Route::middleware(['auth', 'verified'])->group(function () {
    // User Management Routes
    Route::get('/user-management', function() {
        if (Auth::user()->role === 'student') {
            return redirect()->route('user.dashboard')->with('error', 'Access denied.');
        }
        return redirect()->route('add.teacher');
    })->name('user.management');

    Route::get('/add-teacher', function() {
        if (Auth::user()->role !== 'admin') {
            return redirect()->route('user.dashboard')->with('error', 'Access denied.');
        }
        return app()->make(UserController::class)->showTeachers();
    })->name('add.teacher');

    Route::get('/add-student', function() {
        if (Auth::user()->role !== 'admin') {
            return redirect()->route('user.dashboard')->with('error', 'Access denied.');
        }
        return app()->make(UserController::class)->showStudents();
    })->name('add.student');

    // Student Routes (accessible to all)
    Route::get('/student/grades', [StudentController::class, 'showGrades'])->name('student.grades');

    // Admin/Teacher Routes
    Route::group([
        'middleware' => function ($request, $next) {
            if (Auth::user()->role === 'student') {
                return redirect()->route('user.dashboard')->with('error', 'Access denied.');
            }
            return $next($request);
        }
    ], function () {
        Route::post('/advisory-class/confirm-grades', [AdvisoryClassController::class, 'confirmGrades'])
            ->name('advisory-class.confirm-grades');
        Route::get('/filtered-classes', [SectionSubjectController::class, 'getFilteredClasses'])->name('filtered.classes');
        Route::post('/assign-teacher-to-class', [SectionSubjectController::class, 'assignTeacherToClass'])->name('assign.teacher.to.class');
        Route::get('/available-teachers', [SectionSubjectController::class, 'getAvailableTeachers'])->name('available.teachers');
        Route::get('/filtered-students', [MasterListController::class, 'getFilteredStudents'])->name('filtered.students');
        
        Route::post('/users', [UserController::class, 'store'])->name('users.store');
        Route::get('/users/{user}/edit', [UserController::class, 'edit'])->name('users.edit');
        Route::put('/users/{user}', [UserController::class, 'update'])->name('users.update');
        Route::delete('/users/{user}', [UserController::class, 'destroy'])->name('users.destroy');
        Route::get('/api/teacher/advisory-class-info', [TeacherDashboardController::class, 'getAdvisoryClassInfo'])
        ->middleware(['auth', 'verified']);
    
    Route::get('/api/teacher/subjects', [TeacherDashboardController::class, 'getSubjects'])
        ->middleware(['auth', 'verified']);
    
    Route::get('/api/teacher/performance-data', [TeacherDashboardController::class, 'getPerformanceData'])
        ->middleware(['auth', 'verified']);
        // CSV Import/Export Routes
        Route::post('/export-teachers', [UserController::class, 'exportSelectedTeachersToCSV'])->name('export.teachers');
        Route::post('/export-students', [StudentController::class, 'exportSelectedToCSV'])->name('export.students');
        Route::post('/import-teachers', [UserController::class, 'importTeachers'])->name('import.teachers');
        Route::post('/import-students', [UserController::class, 'importStudents'])->name('import.students');
        Route::get('/available-students', [SectionSubjectController::class, 'getAvailableStudents'])->name('available.students');
        Route::get('/section-subject', [SectionSubjectController::class, 'index'])->name('section.subject');
        Route::delete('/students/{user}', [StudentController::class, 'destroy'])->name('students.destroy');
        Route::post('/addclassjunior', [SectionSubjectController::class, 'storeJuniorClass'])->name('store.junior.class');
        Route::post('/addclasssenior', [SectionSubjectController::class, 'storeSeniorClass'])->name('store.senior.class');
        Route::get('/class/{id}', [SectionSubjectController::class, 'getClassDetails'])->name('class.details');
        Route::get('/addclassjunior', [SectionSubjectController::class, 'addClassJunior'])->name('addclassjunior');
        Route::get('/addclasssenior', [SectionSubjectController::class, 'addClassSenior'])->name('addclasssenior');
        Route::get('/check-adviser-availability/{teacherId}', [SectionSubjectController::class, 'checkAdviserAvailability']);
        Route::get('/sections-by-strand', [SectionSubjectController::class, 'getSectionsByStrand']);
        Route::get('/strands-by-grade', [SectionSubjectController::class, 'getStrandsByGradeLevel']);
        Route::get('/sections/with-classes', [SectionSubjectController::class, 'getSectionsWithClasses']);
        Route::get('/check-section-used', [SectionSubjectController::class, 'checkSectionUsed']);

        Route::get('/master-list', [MasterListController::class, 'index'])->name('master.list');
        Route::get('/student/{student}/grades', [MasterListController::class, 'getStudentGrades'])->name('student.grades.api');
        
        // Advisory Class Routes
        Route::get('/advisory-class', [AdvisoryClassController::class, 'index'])->name('advisory.class');
        Route::get('/advisory-class/student-grades/{student}', [AdvisoryClassController::class, 'getStudentGrades'])
             ->name('advisory.student.grades');
        Route::get('/advisory-class/info', [AdvisoryClassController::class, 'getClassInfo'])
             ->name('advisory.class.info');
        Route::get('/advisory-class/achievers', [AdvisoryClassController::class, 'getAchievers'])
             ->name('advisory.class.achievers');
        Route::get('/achievers', [AchieverController::class, 'index'])->name('achievers');
        Route::get('/achievers/by-year', [AchieverController::class, 'getAchieversByYear'])->name('achievers.by.year');
        Route::get('/advisory-class/subject-grade-status', [AdvisoryClassController::class, 'getSubjectGradeStatus'])
             ->name('advisory-class.subject-grade-status');
        Route::get('/advisory-class/check-submission-status', [AdvisoryClassController::class, 'checkSubmissionStatus'])
             ->name('advisory-class.check-submission-status');
        Route::post('/promote-students', [SectionSubjectController::class, 'promoteStudents'])
             ->name('promote.students');
        
        // Subject and Grading Routes
        Route::get('/subjects', [SubjectController::class, 'index'])->name('subjects');
        Route::get('/subjects/by-year', [SubjectController::class, 'getSubjects'])->name('subjects.by.year');
        Route::get('/subjects/{subject}/students', [SubjectController::class, 'getStudentsForSubject'])->name('subjects.students');
        Route::post('/subjects/update-grades', [SubjectController::class, 'updateGrades'])->name('subjects.update.grades');

        // Sections
        Route::get('sections', [SectionController::class, 'index']);
        Route::get('sections/by-grade/{grade_level}', [SectionController::class, 'getByGradeLevel']);
        Route::post('sections', [SectionController::class, 'store']);
        Route::put('sections/{section}', [SectionController::class, 'update']);
        Route::delete('sections/{section}', [SectionController::class, 'destroy']);

        // Strands
        Route::get('strands-sections', [StrandController::class, 'index']);
        Route::post('strands', [StrandController::class, 'store']);
        Route::delete('strands/{strand}', [StrandController::class, 'destroy']);
        Route::post('sections-with-strand', [StrandController::class, 'storeSection']);
        Route::put('sections-with-strand/{section}', [StrandController::class, 'updateSection'])->where('section', '[0-9]+');
        Route::delete('sections-with-strand/{section}', [StrandController::class, 'destroySection'])->where('section', '[0-9]+');
        Route::get('/sections-by-strand', [SectionSubjectController::class, 'getSectionsByStrand']);
        
        Route::post('/add-student-to-class', [ClassController::class, 'addStudentToClass'])->name('add.student.to.class');
        Route::post('/save-subject-to-group', [SubjectController::class, 'saveToGroup']);
    });

    // Student Access Control Routes
    Route::get('/student-access/status', [StudentAccessController::class, 'status'])
        ->name('student-access.status');
    Route::post('/student-access/toggle', [StudentAccessController::class, 'toggleAll'])
        ->name('student-access.toggle');
});

// Public Routes
Route::get('/', function () {
    return view('auth.login');
});

Route::get('/login', function () {
    return view('auth.login');
})->name('login');

Route::post('/login', function () {
    $credentials = request()->only('email', 'password');

    if (Auth::attempt($credentials)) {
        request()->session()->regenerate();
        return redirect()->intended('dashboard'); // Redirect to the intended page or dashboard
    }

    return back()->withErrors([
        'email' => 'The provided credentials do not match our records.',
    ]);
})->name('login.post');

// Logout Route
Route::post('/logout', function () {
    Auth::logout();
    request()->session()->invalidate();
    request()->session()->regenerateToken();
    return redirect('/');
})->name('logout');

// Profile Routes
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});